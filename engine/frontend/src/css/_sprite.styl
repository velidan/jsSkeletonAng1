/*
Stylus variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon_home_width;
}

The large array-like variables contain all information about a single icon
$icon_home = x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet = width height image $spritesheet_sprites;
*/
$s_1_name = 's_1';
$s_1_x = 0px;
$s_1_y = 0px;
$s_1_offset_x = 0px;
$s_1_offset_y = 0px;
$s_1_width = 64px;
$s_1_height = 64px;
$s_1_total_width = 64px;
$s_1_total_height = 271px;
$s_1_image = '/images/sprite.png';
$s_1 = 0px 0px 0px 0px 64px 64px 64px 271px '/images/sprite.png' 's_1';
$s_2_name = 's_2';
$s_2_x = 0px;
$s_2_y = 69px;
$s_2_offset_x = 0px;
$s_2_offset_y = -69px;
$s_2_width = 64px;
$s_2_height = 64px;
$s_2_total_width = 64px;
$s_2_total_height = 271px;
$s_2_image = '/images/sprite.png';
$s_2 = 0px 69px 0px -69px 64px 64px 64px 271px '/images/sprite.png' 's_2';
$s_3_name = 's_3';
$s_3_x = 0px;
$s_3_y = 138px;
$s_3_offset_x = 0px;
$s_3_offset_y = -138px;
$s_3_width = 64px;
$s_3_height = 64px;
$s_3_total_width = 64px;
$s_3_total_height = 271px;
$s_3_image = '/images/sprite.png';
$s_3 = 0px 138px 0px -138px 64px 64px 64px 271px '/images/sprite.png' 's_3';
$s_4_name = 's_4';
$s_4_x = 0px;
$s_4_y = 207px;
$s_4_offset_x = 0px;
$s_4_offset_y = -207px;
$s_4_width = 64px;
$s_4_height = 64px;
$s_4_total_width = 64px;
$s_4_total_height = 271px;
$s_4_image = '/images/sprite.png';
$s_4 = 0px 207px 0px -207px 64px 64px 64px 271px '/images/sprite.png' 's_4';
$spritesheet_width = 64px;
$spritesheet_height = 271px;
$spritesheet_image = '/images/sprite.png';
$spritesheet_sprites = $s_1 $s_2 $s_3 $s_4;
$spritesheet = 64px 271px '/images/sprite.png' $spritesheet_sprites;

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  spriteWidth($icon_home)
}

.icon-email {
  sprite($icon_email)
}

Here are example usages in HTML:

`display: block` sprite:
<div class="icon-home"></div>

`display: inline-block` sprite:
<img class="icon-home" />
*/


/* For normal sprites group */

spriteWidth_low_2x($sprite) {
  width: ($sprite[4] / 2);
}

spriteHeight_low_2x($sprite) {
  height: ($sprite[5] / 2);
}

spritePosition_low_2x($sprite) {
  background-position: ($sprite[2] / 2) ($sprite[3] / 2);
}

spriteImage_low_2x($sprite) {
  background-image: url($sprite[8]);
}

normalSprite($sprite) {
  spriteImage_low_2x($sprite)
  spritePosition_low_2x($sprite)
  spriteWidth_low_2x($sprite)
  spriteHeight_low_2x($sprite)
  background-size ($spritesheet_width / 2) ($spritesheet_height / 2)
}


/* For retina sprites group */

spriteWidth($sprite) {
  width: $sprite[4];
}

spriteHeight($sprite) {
  height: $sprite[5];
}

spritePosition($sprite) {
  background-position: $sprite[2] $sprite[3];
}

spriteImage($sprite) {
  background-image: url($sprite[8]);
}

retinaSprite($sprite) {
  spriteImage($sprite)
  spritePosition($sprite)
  spriteWidth($sprite)
  spriteHeight($sprite)
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of Stylus

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

By Sviatoslav Wellnine : Also generate retina sprite without additional sprite
image. Avoid request to server for sprite@x2 like in most articles about
retina sprites -_-

generateRetinaSprites($spritesheet_sprites);
*/
generateRetinaSprites($sprites) {
  for $sprite in $sprites {
    $sprite_name = $sprite[9];
    .{$sprite_name}:before {
      content: '';
      display: block;
      normalSprite($sprite);

      @media (-webkit-min-device-pixel-ratio: 2),
         (min-resolution: 192dpi) {
            retinaSprite($sprite)
            background-size $spritesheet_width $spritesheet_height
          }

    }
  }
}

generateRetinaSprites($spritesheet_sprites);
